# inspiration:
#   - https://github.com/dflook/terraform-github-actions
#   - https://github.com/WahlNetwork/github-action-terraform/blob/master/.github/workflows/tf-plan.yml

name: Terraform plan

# Trigger when a pull request is received
on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Lambda
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Build Lambda
        run: GOOS=linux GOARCH=amd64 go build -o main main.go
      - uses: actions/upload-artifact@v2
        with:
          name: main
          path: main

  terraform-plan:
    name: "Terraform Plan"
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./deployments/terraform/environment/production"
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0

      # Static analysis of Terraform templates to spot potential security issues
      # Marketplace: https://github.com/marketplace/actions/terraform-security-scan
      - name: "Setup - Security Scan"
        uses: triat/terraform-security-scan@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # An unfortunately necessary hack given Lambda
      - name: Download Lambda
        uses: actions/download-artifact@v2
        with:
          name: main

      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1.2.1

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          TF_ACTION_WORKING_DIR: "deployments/terraform/environments/production"

      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Run - Terraform Plan"
        id: plan
        run: terraform plan -input=false -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          TF_ACTION_WORKING_DIR: "deployments/terraform/environments/production"

      # Submit a comment with the plan output to the pull request
      - name: "Run - Terraform Comment"
        uses: actions/github-script@0.9.0
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })